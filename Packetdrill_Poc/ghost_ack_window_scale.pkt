// ------------Initialize server socket ---------- //

0 socket(...,SOCK_STREAM,IPPROTO_TCP)=3
+0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0 bind(3, ..., ...)=0
+0 listen(3,1)=0

// ----------------------------------------------- //


// ---------------- Handshake ------------------- //

// when window scale is set to 14 the window size can be extened to
// 65535 * (2^14) = 1073725440. Linux would accept an ACK packet 
// with ack number in (Server_ISN+1-1073725440. Server_ISN+1)
// ,though this ack number acknowledges some data never
// sent by the server.

+0 < S 0:0(0) win 65535 <mss 1000,nop,wscale 14>
+0 > S. 0:0(0) ack 1 <...>
+0 < . 1:1(0) ack 1 win 65535 <mss 1000,nop,wscale 14>
+0 accept(3, ..., ...)=4

// ----------------------------------------------- //


// For the established connection, we send an ACK packet,
// the ack packet uses ack number 1 - 1073725300 + 2^32,
// where 2^32 is used to wrap around. 
// Note: we used 1073725300 instead of 1073725440 to avoid possible
// edge cases.
// 1 - 1073725300 + 2^32 = 3221241997

+0 < . 1:11(10) ack 3221241997 win 65535 <mss 1000,nop,wscale 14>
+0 > . 1:1(0) ack 11

// the 10 bytes payload in the ACK packet acknowledging data 
// never sent by the server is accepted and can be read by
// the server socket

+0 read(4, ..., 4096)=10

+0 < F. 11:11(0) ack 1 win 65535 <mss 1000,nop,wscale 14>
+.04 > . 1:1(0) ack 12




